# encoding: utf-8
require File.expand_path(File.dirname(__FILE__)) + '/../test_helper'

# This file is generated by the Ruby Holiday gem.
#
# Definitions loaded: definitions/ca.yaml, definitions/mx.yaml, definitions/us.yaml, definitions/north_america_informal.yaml
class North_americaDefinitionTests < Test::Unit::TestCase  # :nodoc:

  def test_north_america
{Date.civil(2008,1,1) => 'New Year\'s Day',
 Date.civil(2008,3,21) => 'Good Friday',
 Date.civil(2013,3,31) => 'Easter Sunday',
 Date.civil(2008,3,24) => 'Easter Monday',
 Date.civil(2008,7,1) => 'Canada Day',
 Date.civil(2008,9,1) => 'Labour Day',
 Date.civil(2008,12,25) => 'Christmas Day'}.each do |date, name|
  assert_equal name, (Holidays.on(date, :ca, :informal)[0] || {})[:name]
end

# Family Day in Alberta - Should only be active on 1990 or later
[
  Date.civil(1990,2,19),
  Date.civil(2013,2,18),
  Date.civil(2014,2,17),
  Date.civil(2044,2,15),
].each do |date|
  assert_equal 'Family Day', Holidays.on(date, :ca_ab)[0][:name]
end

# Family Day in Alberta - should not be active before 1990
[
  Date.civil(1970,2,16),
  Date.civil(1988,2,15),
  Date.civil(1989,2,20),
].each do |date|
  assert_equal [], Holidays.on(date, :ca_ab)
end

# Family Day in Saskatchewan - Should only be active on 2007 or later
[
  Date.civil(2007,2,19),
  Date.civil(2013,2,18),
  Date.civil(2014,2,17),
  Date.civil(2044,2,15),
].each do |date|
  assert_equal 'Family Day', Holidays.on(date, :ca_sk)[0][:name]
end

# Family Day in Saskatchewan - should not be active before 2007
[
  Date.civil(1970,2,16),
  Date.civil(1988,2,15),
  Date.civil(1989,2,20),
  Date.civil(2006,2,20),
].each do |date|
  assert_equal [], Holidays.on(date, :ca_sk)
end

# Family Day in Ontario - Should only be active on 2008 or later
[
  Date.civil(2008,2,18),
  Date.civil(2013,2,18),
  Date.civil(2014,2,17),
  Date.civil(2044,2,15),
].each do |date|
  assert_equal 'Family Day', Holidays.on(date, :ca_on)[0][:name]
end

# Family Day in Ontario - should not be active before 2008
[
  Date.civil(1970,2,16),
  Date.civil(1988,2,15),
  Date.civil(1989,2,20),
  Date.civil(2006,2,20),
  Date.civil(2007,2,19),
].each do |date|
  assert_equal [], Holidays.on(date, :ca_on)
end

# Family Day in BC - Should only be active on 2013 or later
[
  Date.civil(2013,2,11),
  Date.civil(2014,2,10),
  Date.civil(2044,2,8),
].each do |date|
  assert_equal 'Family Day', Holidays.on(date, :ca_bc)[0][:name]
end

# Family Day in BC - should not be active before 2013
[
  Date.civil(2000,2,14),
  Date.civil(2011,2,14),
  Date.civil(2012,2,13),
].each do |date|
  assert_equal [], Holidays.on(date, :ca_bc)
end

# Nova Scotia Heritage Day - should only be active on 2015 and later
[
  Date.civil(2015,2,16),
  Date.civil(2016,2,15),
  Date.civil(2017,2,20),
  Date.civil(2044,2,15),
].each do |date|
  assert_equal 'Nova Scotia Heritage Day', Holidays.on(date, :ca_ns)[0][:name]
end

# Nova Scotia Heritage Day - should not be active before 2015
[
  Date.civil(2000,2,21),
  Date.civil(2012,2,20),
  Date.civil(2013,2,18),
  Date.civil(2014,2,17),
].each do |date|
  assert_equal [], Holidays.on(date, :ca_ns)
end

# Islander Day in PE
[ Date.civil(2013,2,18), Date.civil(2014,2,17) ].each do |date|
  assert_equal 'Islander Day', Holidays.on(date, :ca_pe)[0][:name]
end


# Victoria Day
[:ca_ab, :ca_bc, :ca_mb, :ca_nt, :ca_nu, :ca_on, :ca_sk, :ca_yt].each do |r|
  [
    Date.civil(2004,5,24), Date.civil(2005,5,23), Date.civil(2006,5,22),
    Date.civil(2007,5,21), Date.civil(2008,5,19)
  ].each do |date|
    assert_equal 'Victoria Day', Holidays.on(date, r)[0][:name]
  end
end

# First Monday in August
[Date.civil(2013,8,5), Date.civil(2014,8,4), Date.civil(2015,8,3)].each do |date|
  { :ca_bc => 'B.C. Day',
    :ca_sk => 'Saskatchewan Day',
    :ca_ab => 'Heritage Day',
    :ca_ns => 'Natal Day',
    :ca_nt => 'Civic Holiday',
    :ca_nu => 'Civic Holiday',
    :ca_pe => 'Civic Holiday',
    :ca_nb => 'New Brunswick Day'
  }.each do |region, name|
    assert_equal name, Holidays.on(date, region)[0][:name]
  end
end

# Civic Holiday is only by convention in :ca_on
[Date.civil(2013,8,5), Date.civil(2014,8,4), Date.civil(2015,8,3)].each do |date|
  assert_equal 'Civic Holiday', Holidays.on(date, :ca_on, :informal)[0][:name]
end

# Remembrance Day in all Canadian provinces
# except (Nova Scotia, Manitoba, Ontario, and Quebec)
[
  :ca_ab,
  :ca_sk,
  :ca_bc,
  :ca_pe,
  :ca_nl,
  :ca_nt,
  :ca_nu,
  :ca_nb,
  :ca_yt
].each do |province|
  # Remembrance Day observed
  [Date.civil(2010, 11, 11), Date.civil(2012, 11, 12), Date.civil(2017, 11, 13)].each do |date|
    assert_equal 'Remembrance Day', Holidays.on(date, province, :observed)[0][:name]
  end

  # Remembrance Day
  assert_equal "Remembrance Day", Holidays.on(Date.civil(2016,11,11), province)[0][:name]
end

# New years observed date
[Date.civil(2011, 1, 3), Date.civil(2012, 1, 2), Date.civil(2016, 1, 1)].each do |date|
  assert_equal 'New Year\'s Day', Holidays.on(date, :ca, :observed)[0][:name]
end

# Canada Day observed date
[Date.civil(2011, 7, 1), Date.civil(2012, 7, 2), Date.civil(2017, 7, 3)].each do |date|
  assert_equal 'Canada Day', Holidays.on(date, :ca, :observed)[0][:name]
end

# Christmas observed date
[Date.civil(2010, 12, 27), Date.civil(2012, 12, 25), Date.civil(2016, 12, 26)].each do |date|
  assert_equal 'Christmas Day', Holidays.on(date, :ca, :observed)[0][:name]
end

# Boxing Day observed date
[Date.civil(2010, 12, 28), Date.civil(2012, 12, 26), Date.civil(2016, 12, 27),
 Date.civil(2015, 12, 28)].each do |date|
  assert_equal 'Boxing Day', Holidays.on(date, :ca_on, :observed)[0][:name]
end


{Date.civil(2007,1,1) => 'Año nuevo',
 Date.civil(2007,2,5) => 'Día de la Constitución',
 Date.civil(2007,5,1) => 'Día del Trabajo',
 Date.civil(2007,5,5) => 'Cinco de Mayo',
 Date.civil(2007,9,16) => 'Día de la Independencia',
 Date.civil(2007,11,1) => 'Todos los Santos',
 Date.civil(2007,11,2) => 'Los Fieles Difuntos',
 Date.civil(2007,11,19) => 'Día de la Revolución',
 Date.civil(2007,12,25) => 'Navidad'}.each do |date, name|
  assert_equal name, (Holidays.on(date, :mx, :informal)[0] || {})[:name]
end


[Date.civil(2017, 2, 28), Date.civil(2018, 2, 13), Date.civil(2019, 3, 5)].each do |date|
  assert_equal [], Holidays.on(date, [:us])
  assert_equal 'Shrove Tuesday', Holidays.on(date, [:us_fl])[0][:name]
  assert_equal 'Mardi Gras Day', Holidays.on(date, [:us_la])[0][:name]
end
states_good_friday = %i{us_ct us_de us_gu us_hi us_in us_ky us_la us_nj us_nc us_nd us_pr us_tn}
[Date.civil(2017, 4, 14), Date.civil(2018, 3, 30), Date.civil(2019, 4, 19)].each do |date|
  assert_equal [], Holidays.on(date, [:us])
  assert_equal 'Good Friday', Holidays.on(date, :us, :informal)[0][:name]
  assert_equal 'Good Friday', Holidays.on(date, states_good_friday)[0][:name]
end
[Date.civil(2017, 4, 16), Date.civil(2018, 4, 1), Date.civil(2019, 4, 21)].each do |date|
  assert_equal [], Holidays.on(date, [:us])
  assert_equal 'Easter Sunday', Holidays.on(date, :us, :informal)[0][:name]
end

assert_equal "New Year's Day", Holidays.on(Date.civil(2017, 1, 1), [:us])[0][:name]
assert_equal "New Year's Day", Holidays.on(Date.civil(2017, 1, 2), :observed, [:us])[0][:name]

[Date.civil(2017, 1, 16), Date.civil(2018, 1, 15), Date.civil(2019, 1, 21)].each do |date|
  assert_equal 'Martin Luther King, Jr. Day', Holidays.on(date, [:us])[0][:name]
end
[Date.civil(2016, 1, 18), Date.civil(2017, 1, 16), Date.civil(2018, 1, 15)].each do |date|
  assert_equal 'Martin Luther King, Jr. Day', Holidays.on(date, [:us])[0][:name]
  assert_equal "Martin Luther King's and Robert E. Lee's Birthdays", Holidays.on(date, [:us_ms])[0][:name]
end
[Date.civil(2016, 1, 18), Date.civil(2017, 1, 16), Date.civil(2018, 1, 15)].each do |date|
  assert_equal 'Martin Luther King, Jr. Day', Holidays.on(date, [:us])[0][:name]
  assert_equal 'Idaho Human Rights Day', Holidays.on(date, [:us_id])[0][:name]
end
[Date.civil(2016, 1, 18), Date.civil(2017, 1, 16), Date.civil(2018, 1, 15)].each do |date|
  assert_equal 'Martin Luther King, Jr. Day', Holidays.on(date, [:us])[0][:name]
  assert_equal 'Civil Rights Day', Holidays.on(date, [:us_ar])[0][:name]
end

states_inauguration = %i{us_tx us_dc us_la us_md us_va}
[Date.civil(2017, 1, 20), Date.civil(2021, 1, 20)].each do |date|
  assert_equal [], Holidays.on(date, [:us])
  assert_equal 'Inauguration Day', Holidays.on(date, states_inauguration)[0][:name]
end
assert_equal 'Inauguration Day', Holidays.on(Date.civil(2025, 1, 20), states_inauguration)[1][:name]

[Date.civil(2017, 1, 13), Date.civil(2018, 1, 12), Date.civil(2019, 1, 18)].each do |date|
  assert_equal [], Holidays.on(date, [:us])
  assert_equal 'Lee-Jackson Day', Holidays.on(date, [:us_va])[0][:name]
end

assert_equal 'Confederate Heroes Day', Holidays.on(Date.civil(2017, 1, 19), [:us_tx])[0][:name]

[Date.civil(2008, 2, 18), Date.civil(2017, 2, 20), Date.civil(2018, 2, 19)].each do |date|
  assert_equal "Presidents' Day", Holidays.on(date, [:us])[0][:name]
end
[Date.civil(2017, 3, 6), Date.civil(2018, 3, 5), Date.civil(2019, 3, 4)].each do |date|
  assert_equal [], Holidays.on(date, [:us])
  assert_equal 'Casimir Pulaski Day', Holidays.on(date, [:us_il])[0][:name]
end
[Date.civil(2017, 3, 7), Date.civil(2018, 3, 6), Date.civil(2019, 3, 5)].each do |date|
  assert_equal [], Holidays.on(date, [:us])
  assert_equal 'Town Meeting Day', Holidays.on(date, [:us_vt])[0][:name]
end

assert_equal 'Texas Independence Day', Holidays.on(Date.civil(2017, 3, 2), [:us_tx])[0][:name]

[Date.civil(2017, 3, 27), Date.civil(2018, 3, 26), Date.civil(2022, 3, 25)].each do |date|
  assert_equal [], Holidays.on(date, [:us])
  assert_equal 'Prince Jonah Kuhio Kalanianaole Day', Holidays.on(date, [:us_hi], :observed)[0][:name]
end
assert_equal [], Holidays.on(Date.civil(2017, 3, 26), [:us])
assert_equal 'Prince Jonah Kuhio Kalanianaole Day', Holidays.on(Date.civil(2017, 3, 26), [:us_hi])[0][:name]

[Date.civil(2017, 3, 27), Date.civil(2018, 3, 26), Date.civil(2019, 3, 25)].each do |date|
  assert_equal [], Holidays.on(date, [:us])
  assert_equal "Seward's Day", Holidays.on(date, [:us_ak])[0][:name]
end

assert_equal 'César Chávez Day', Holidays.on(Date.civil(2017, 3, 31), [:us_ca])[0][:name]

[Date.civil(2023, 4, 17), Date.civil(2022, 4, 15), Date.civil(2028, 4, 17)].each do |date|
  assert_equal 'Emancipation Day', Holidays.on(date, [:us_dc, :us_ca], :observed)[0][:name]
end
assert_equal 'Emancipation Day', Holidays.on(Date.civil(2017, 4, 16), [:us_dc, :us_ca])[0][:name]

[Date.civil(2017, 4, 17), Date.civil(2018, 4, 16), Date.civil(2019, 4, 15)].each do |date|
  assert_equal [], Holidays.on(date, [:us])
  assert_equal "Patriots' Day", Holidays.on(date, [:us_me, :us_ma])[0][:name]
end

assert_equal 'San Jacinto Day', Holidays.on(Date.civil(2017, 4, 21), [:us_tx])[0][:name]

[Date.civil(2017, 4, 24), Date.civil(2018, 4, 30), Date.civil(2019, 4, 29)].each do |date|
  assert_equal [], Holidays.on(date, [:us])
  assert_equal 'Confederate Memorial Day', Holidays.on(date, [:us_al, :us_ms])[0][:name]
end
[Date.civil(2015, 4, 27), Date.civil(2020, 4, 27), Date.civil(2026, 4, 27)].each do |date|
  assert_equal [], Holidays.on(Date.civil(2020, 4, 27), [:us])
  assert_equal 'Confederate Memorial Day', Holidays.on(Date.civil(2020, 4, 27), [:us_fl], :observed)[0][:name]
end
assert_equal [], Holidays.on(Date.civil(2017, 4, 26), [:us])
assert_equal 'Confederate Memorial Day', Holidays.on(Date.civil(2017, 4, 26), [:us_fl])[0][:name]

[Date.civil(2015, 4, 20), Date.civil(2021, 4, 26)].each do |date|
  assert_equal [], Holidays.on(Date.civil(2015, 4, 20), [:us])
  assert_equal 'State Holiday', Holidays.on(date, [:us_ga])[0][:name]
end

assert_equal 'Arbor Day', Holidays.on(Date.civil(2017, 4, 28), [:us_ne])[0][:name]
assert_equal 'Truman Day', Holidays.on(Date.civil(2017, 5, 8), [:us_mo])[0][:name]
assert_equal 'Confederate Memorial Day', Holidays.on(Date.civil(2017, 5, 10), [:us_sc])[0][:name]

[Date.civil(2017, 5, 29), Date.civil(2018, 5, 28), Date.civil(2019, 5, 27)].each do |date|
  assert_equal 'Memorial Day', Holidays.on(date, [:us])[0][:name]
end

[Date.civil(2017, 6, 5), Date.civil(2018, 6, 4), Date.civil(2019, 6, 3)].each do |date|
  assert_equal [], Holidays.on(date, [:us])
  assert_equal "Jefferson Davis' Birthday", Holidays.on(date, [:us_al])[0][:name]
end
assert_equal 'Birthday of Jefferson Davis', Holidays.on(Date.civil(2017, 6, 3), [:us_fl])[0][:name]

[Date.civil(2017, 6, 12), Date.civil(2018, 6, 11), Date.civil(2022, 6, 10)].each do |date|
  assert_equal [], Holidays.on(date, [:us])
  assert_equal 'King Kamehameha I Day', Holidays.on(date, [:us_hi], :observed)[0][:name]
end
assert_equal [], Holidays.on(Date.civil(2017, 6, 11), [:us])
assert_equal 'King Kamehameha I Day', Holidays.on(Date.civil(2017, 6, 11), [:us_hi])[0][:name]

assert_equal 'Emancipation Day in Texas', Holidays.on(Date.civil(2017, 6, 19), [:us_tx])[0][:name]

[Date.civil(2017, 6, 20), Date.civil(2020, 6, 19), Date.civil(2021, 6, 21)].each do |date|
  assert_equal [], Holidays.on(date, [:us])
  assert_equal 'West Virginia Day', Holidays.on(date, [:us_wv], :observed)[0][:name]
end
assert_equal [], Holidays.on(Date.civil(2017, 6, 20), [:us])
assert_equal 'West Virginia Day', Holidays.on(Date.civil(2017, 6, 20), [:us_wv])[0][:name]

assert_equal 'Emancipation Day', Holidays.on(Date.civil(2017, 7, 3), [:us_vi])[0][:name]

[Date.civil(2020, 7, 4), Date.civil(2021, 7, 4), Date.civil(2026, 7, 4)].each do |date|
  assert_equal 'Independence Day', Holidays.on(date, [:us])[0][:name]
  assert_equal 'Independence Day', Holidays.on(date, [:us_va])[0][:name]
end
[Date.civil(2020, 7, 3), Date.civil(2021, 7, 5), Date.civil(2026, 7, 3)].each do |date|
  assert_equal [], Holidays.on(date, [:us])
  assert_equal 'Independence Day (Holiday)', Holidays.on(date, [:us_va])[0][:name]
end

assert_equal 'Pioneer Day', Holidays.on(Date.civil(2017, 7, 24), [:us_ut])[0][:name]

[Date.civil(2017, 8, 14), Date.civil(2020, 8, 10), Date.civil(2021, 8, 9)].each do |date|
  assert_equal [], Holidays.on(date, [:us])
  assert_equal 'Victory Day', Holidays.on(date, [:us_ri])[0][:name]
end

[Date.civil(2017, 8, 16), Date.civil(2020, 8, 17), Date.civil(2025, 8, 15)].each do |date|
  assert_equal [], Holidays.on(date, [:us])
  assert_equal 'Bennington Battle Day', Holidays.on(date, [:us_vt], :observed)[0][:name]
end
assert_equal [], Holidays.on(Date.civil(2017, 8, 16), [:us])
assert_equal 'Bennington Battle Day', Holidays.on(Date.civil(2017, 8, 16), [:us_vt])[0][:name]

[Date.civil(2017, 8, 18), Date.civil(2020, 8, 21), Date.civil(2025, 8, 15)].each do |date|
  assert_equal [], Holidays.on(date, [:us])
  assert_equal 'Statehood Day', Holidays.on(date, [:us_hi])[0][:name]
end

assert_equal 'Lyndon Baines Johnson Day', Holidays.on(Date.civil(2017, 8, 27), [:us_tx])[0][:name]

[Date.civil(2017, 9, 4), Date.civil(2018, 9, 3), Date.civil(2019, 9, 2)].each do |date|
  assert_equal 'Labor Day', Holidays.on(date, [:us])[0][:name]
end
[Date.civil(2017, 9, 21), Date.civil(2018, 9, 10), Date.civil(2019, 9, 30)].each do |date|
  assert_equal [], Holidays.on(date, [:us])
  assert_equal 'Rosh Hashanah', Holidays.on(date, [:us_tx])[0][:name]
end
[Date.civil(2017, 9, 30), Date.civil(2018, 9, 19), Date.civil(2019, 10, 9)].each do |date|
  assert_equal [], Holidays.on(date, [:us])
  assert_equal 'Yom Kippur', Holidays.on(date, [:us_tx])[0][:name]
end

states_columbus_day_formal =
  %i{us_al us_az us_co us_ct us_dc us_ga us_id us_il us_in us_ma us_md us_me us_mo us_mt us_ne
     us_nj us_nm us_ny us_oh us_pa us_ri us_ut us_va us_wv}
states_columbus_day_informal =
  %i{us_ak us_ar us_ca us_de us_fl us_hi us_mi us_mn us_nd us_nv us_or us_sd us_tx us_vt us_wa us_wi us_wy}

[Date.civil(2017, 10, 9), Date.civil(2018, 10, 8), Date.civil(2019, 10, 14)].each do |date|
  assert_equal [], Holidays.on(date, [:us])
  assert_equal [], Holidays.on(date, states_columbus_day_informal)
  assert_equal 'Columbus Day', Holidays.on(date, states_columbus_day_formal)[0][:name]
  assert_equal 'Columbus Day', Holidays.on(date, states_columbus_day_informal, :informal)[0][:name]
end

assert_equal 'Alaska Day', Holidays.on(Date.civil(2017, 10, 18), [:us_ak])[0][:name]

[Date.civil(2017, 10, 27), Date.civil(2018, 10, 26), Date.civil(2019, 10, 25)].each do |date|
  assert_equal [], Holidays.on(date, [:us])
  assert_equal 'Nevada Day', Holidays.on(date, :us_nv)[0][:name]
end

states_election_day = %i{us_de us_hi us_il us_in us_mt us_nj us_ny us_pa us_ri}
[Date.civil(2017, 11, 7), Date.civil(2018, 11, 6), Date.civil(2021, 11, 2)].each do |date|
  assert_equal [], Holidays.on(date, [:us])
  assert_equal 'Election Day', Holidays.on(date, states_election_day)[0][:name]
end

[Date.civil(2017, 11, 10), Date.civil(2018, 11, 12), Date.civil(2019, 11, 11)].each do |date|
  assert_equal 'Veterans Day', Holidays.on(date, [:us], :observed)[0][:name]
end
assert_equal 'Veterans Day', Holidays.on(Date.civil(2017, 11, 11), [:us])[0][:name]

[Date.civil(2017, 11, 23), Date.civil(2018, 11, 22), Date.civil(2019, 11, 28)].each do |date|
  assert_equal 'Thanksgiving', Holidays.on(date, [:us])[0][:name]
end

states_black_friday =
  %i{us_ca us_de us_fl us_ia us_il us_ks us_ky us_me us_mi us_mn us_ms us_ne us_nh us_nc us_pa
     us_sc us_ok us_tn us_tx us_va us_wa us_wv}

[Date.civil(2017, 11, 24), Date.civil(2018, 11, 23), Date.civil(2019, 11, 29)].each do |date|
  assert_equal [], Holidays.on(date, [:us])
  assert_equal 'Family Day', Holidays.on(date, [:us_nv])[0][:name]
  assert_equal 'State Holiday', Holidays.on(date, [:us_ga])[0][:name]
  assert_equal "Presidents' Day", Holidays.on(date, [:us_nm])[0][:name]
  assert_equal "Lincoln's Birthday", Holidays.on(date, [:us_in])[0][:name]
  assert_equal 'American Indian Heritage Day', Holidays.on(date, [:us_md])[0][:name]
  assert_equal 'Day after Thanksgiving (Black Friday)', Holidays.on(date, states_black_friday)[0][:name]
end

states_xmas_eve = %i{us_ar us_mi us_nc us_sc us_tx us_wi}
states_xmas_eve_holiday = %i{us_mi us_sc us_va}
[Date.civil(2022, 12, 23), Date.civil(2023, 12, 22), Date.civil(2028, 12, 22)].each do |date|
  assert_equal 'Christmas Eve (Holiday)', Holidays.on(date, states_xmas_eve_holiday)[0][:name]
end
assert_equal 'Christmas Eve', Holidays.on(Date.civil(2017, 12, 24), states_xmas_eve)[0][:name]
assert_equal 'Christmas Eve', Holidays.on(Date.civil(2017, 12, 24), states_xmas_eve_holiday)[0][:name]

[Date.civil(2021, 12, 27), Date.civil(2022, 12, 26), Date.civil(2027, 12, 27)].each do |date|
  assert_equal [], Holidays.on(date, [:us])
  assert_equal 'Christmas Day', Holidays.on(date, [:us], :observed)[0][:name]
end
assert_equal 'Christmas Day', Holidays.on(Date.civil(2017, 12, 25), [:us])[0][:name]

states_day_after_christmas = %i{us_ar us_nc us_ok us_sc us_tn us_tx}
assert_equal 'Day after Christmas', Holidays.on(Date.civil(2017, 12, 26), states_day_after_christmas)[0][:name]

assert_equal "New Year's Eve", Holidays.on(Date.civil(2017, 12, 31), [:us_mi, :us_wi])[0][:name]


{Date.civil(2013,2,2) => 'Groundhog Day',
 Date.civil(2013,2,14) => 'Valentine\'s Day',
 Date.civil(2013,3,17) => 'St. Patrick\'s Day',
 Date.civil(2013,4,1) => 'April Fool\'s Day',
 Date.civil(2013,4,22) => 'Earth Day',
 Date.civil(2013,5,12) => 'Mother\'s Day',
 Date.civil(2013,5,18) => 'Armed Forces Day',
 Date.civil(2013,6,16) => 'Father\'s Day',
 Date.civil(2013,10,31) => 'Halloween'}.each do |date, name|
  assert_equal name, (Holidays.on(date, :us, :informal)[0] || {})[:name]
end

  end
end
