# encoding: utf-8
require File.expand_path(File.dirname(__FILE__)) + '/../test_helper'

# This file is generated by the Ruby Holiday gem.
#
# Definitions loaded: data/de.yaml
class DeDefinitionTests < Test::Unit::TestCase  # :nodoc:

  def test_de
{Date.civil(2009,1,1) => 'Neujahrstag', 
 Date.civil(2009,4,10) => 'Karfreitag',
 Date.civil(2009,4,13) => 'Ostermontag',
 Date.civil(2009,5,1) => 'Tag der Arbeit',
 Date.civil(2009,5,21) => 'Christi Himmelfahrt',
 Date.civil(2009,6,1) => 'Pfingstmontag',
 Date.civil(2009,10,3) => 'Tag der Deutschen Einheit',
 Date.civil(2009,12,25) => '1. Weihnachtstag',
 Date.civil(2009,12,26) => '2. Weihnachtstag'}.each do |date, name|
  assert_equal name, (Holidays.on(date, :de, :informal)[0] || {})[:name]
end

[:de_bw, :de_by, :de_st, :de_].each do |r|
  assert_equal 'Heilige Drei Könige', Holidays.on(Date.civil(2009,1,6), r)[0][:name]
end

[:de_bw, :de_by, :de_he, :de_nw, :de_rp, :de_sl, :de_].each do |r|
  assert_equal 'Fronleichnam', Holidays.on(Date.civil(2009,6,11), r)[0][:name]
end

[:de_by, :de_sl, :de_].each do |r|
  assert_equal 'Mariä Himmelfahrt', Holidays.on(Date.civil(2009,8,15), r)[0][:name]
end

[:de_bb, :de_mv, :de_sn, :de_st, :de_th, :de_].each do |r|
  assert_equal 'Reformationstag', Holidays.on(Date.civil(2009,10,31), r)[0][:name]
end

[:de_bw, :de_by, :de_nw, :de_rp, :de_sl, :de_].each do |r|
  assert_equal 'Allerheiligen', Holidays.on(Date.civil(2009,11,1), r)[0][:name]
end

[:de_be, :de_hb, :de_hh, :de_ni, :de_sh].each do |r|
  assert_equal 'Tag der Deutschen Einheit', Holidays.on(Date.civil(2009,10,3), r)[0][:name]
end

[:de_by_aux].each do |r|
  assert_equal 'Friedensfest', Date.civil(2015,8,8).holidays(r)[0][:name]
end

[:de_be, :de_hb, :de_hh, :de_ni, :de_sh].each do |r|
  assert_equal [], Holidays.on(Date.civil(2009,1,6), r), "Heilige Drei Könige is not a holiday in #{r}"
end

[:de_be, :de_hb, :de_hh, :de_ni, :de_sh].each do |r|
  assert_equal [], Holidays.on(Date.civil(2009,6,11), r), "Fronleichnam is not a holiday in #{r}"
end

[:de_be, :de_hb, :de_hh, :de_ni, :de_sh].each do |r|
  assert_equal [], Holidays.on(Date.civil(2009,8,15), r), "Mariä Himmelfahrt is not a holiday in #{r}"
end

[:de_be, :de_hb, :de_hh, :de_ni, :de_sh].each do |r|
  assert_equal [], Holidays.on(Date.civil(2009,10,31), r), 'Reformationstag is not a holiday in #{r}'
end

[:de_be, :de_hb, :de_hh, :de_ni, :de_sh].each do |r|
  assert_equal [], Holidays.on(Date.civil(2009,11,1), r), "Allerheiligen is not a holiday in #{r}"
end

[:de,
 :de_bw, :de_by, :de_be, :de_bb, :de_hb, :de_hh, :de_he, :de_mv,
 :de_ni, :de_nw, :de_rp, :de_sl, :de_sn, :de_st, :de_sh, :de_th].each do |r|
  assert !Date.civil(2015,8,8).holiday?(r), "Friedensfest is not a holiday in #{r}"
end

assert !Date.civil(2010,5,8).holiday?(:de), '2010-05-08 is not a holiday in Germany'

assert !Date.civil(2015,8,8).holiday?(:de), '2015-08-08 is not a holiday in Germany'

# Repentance Day
assert_equal 'Buß- und Bettag', Holidays.on(Date.civil(2004,11,17), :de_sn)[0][:name]
assert_equal 'Buß- und Bettag', Holidays.on(Date.civil(2005,11,16), :de_sn)[0][:name]
assert_equal 'Buß- und Bettag', Holidays.on(Date.civil(2006,11,22), :de_sn)[0][:name]
assert_equal 'Buß- und Bettag', Holidays.on(Date.civil(2009,11,18), :de_sn)[0][:name]

  end
end
